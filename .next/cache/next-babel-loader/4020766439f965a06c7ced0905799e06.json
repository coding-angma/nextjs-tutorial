{"ast":null,"code":"var _jsxFileName = \"/Users/ibra/ibra_\\u1100\\u1162\\u110B\\u1175\\u11AB/Dev/nextjs-tutorial_git/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport \"../styles/globals.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport Footer from \"../src/component/Footer\";\nimport Top from \"../src/component/Top\";\n\nfunction MyApp({\n  Component,\n  pageProps\n}) {\n  return __jsx(\"div\", {\n    style: {\n      width: 1000,\n      margin: \"0 auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 5\n    }\n  }, __jsx(Top, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }\n  }), __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }\n  })), __jsx(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default MyApp;\n/**\n * 페이지 전환시 레이아웃을 유지할 수 있습니다.\n페이지 전환시 상태값을 유지할 수 있습니다.\ncomponentDidCatch를 이용해서 커스텀 에러 핸들링을 할 수 있습니다.\n추가적인 데이터를 페이지로 주입시켜주는게 가능합니다.\n글로벌 CSS 를 이곳에 선언합니다.\n * \n */","map":{"version":3,"sources":["/Users/ibra/ibra_개인/Dev/nextjs-tutorial_git/pages/_app.js"],"names":["Footer","Top","MyApp","Component","pageProps","width","margin"],"mappings":";;;;;;AAAA,OAAO,uBAAP;AACA,OAAO,kCAAP;AACA,OAAOA,MAAP,MAAmB,yBAAnB;AACA,OAAOC,GAAP,MAAgB,sBAAhB;;AAEA,SAASC,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAf,EAAyC;AACvC,SACE;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA,MAAM,EAAE;AAAvB,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,SAAD,eAAeF,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,EAGE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAOD;;AAED,eAAeF,KAAf;AAEA","sourcesContent":["import \"../styles/globals.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport Footer from \"../src/component/Footer\";\nimport Top from \"../src/component/Top\";\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <div style={{ width: 1000, margin: \"0 auto\" }}>\n      <Top />\n      <Component {...pageProps} />\n      <Footer />\n    </div>\n  );\n}\n\nexport default MyApp;\n\n/**\n * 페이지 전환시 레이아웃을 유지할 수 있습니다.\n페이지 전환시 상태값을 유지할 수 있습니다.\ncomponentDidCatch를 이용해서 커스텀 에러 핸들링을 할 수 있습니다.\n추가적인 데이터를 페이지로 주입시켜주는게 가능합니다.\n글로벌 CSS 를 이곳에 선언합니다.\n * \n */\n"]},"metadata":{},"sourceType":"module"}